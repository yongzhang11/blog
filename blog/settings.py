"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 1.8.18.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
# 项目路径
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/
#密钥配置
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!sb8df57s!+kepe@q)&!mclhsyie6-!n+=*(#+ab^w_7bon(f)'

# SECURITY WARNING: don't run with debug turned on in production!
# 调试模式 值为布尔类型
DEBUG = True
# 域名访问权限
ALLOWED_HOSTS = []

# APP列表
# Application definition

INSTALLED_APPS = (
    # 'django_admin_bootstrapped',
    'django.contrib.admin',  # 内置管理系统
    'django.contrib.auth',      # 用户认证系统
    'django.contrib.contenttypes',      # 记录项目中所有的model元素（Django的ORM框架）
    'django.contrib.sessions',      # 会话功能，用于标识当前访问网站的用户身份，记录用户信息
    'django.contrib.messages',      # 消息提示功能
    'django.contrib.staticfiles',       # 查找静态资源路径
    'app',                      # 添加APP列表中
    'shop',
)

# 支持中文显示
MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware', # 会话Session功能
    'django.middleware.common.CommonMiddleware', # 处理请求信息 规范内容
    'django.middleware.csrf.CsrfViewMiddleware', # 开启CSRF防护功能
    'django.contrib.auth.middleware.AuthenticationMiddleware', # 开启内置的用户认证系统
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware', # 
    'django.contrib.messages.middleware.MessageMiddleware', # 信息提示功能
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # 防止恶意程序点击劫持
    'django.middleware.security.SecurityMiddleware',  # 内置安全机制
)

ROOT_URLCONF = 'blog.urls'

# 模板控制信息

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR+"/templates",],
        'APP_DIRS': True, # 是否在APP里找文件
        # 上下文的调用函数
        'OPTIONS': { 
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases


# 数据库配置信息 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'blog',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}
'''
# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True

AUTH_USER_MODEL = 'shop.User'

# 配置静态资源存放文件夹
DATETIME_FORMAT = 'Y-m-d H:i:s'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media').replace('\\', '/')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
# TINYMCE_JS_URL = '//cdn.tinymce.com/4/tinymce.min.js'
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR,  'static'),
    os.path.join(BASE_DIR,  'media'),
)
